"use strict";exports.id=108,exports.ids=[108],exports.modules={9108:(e,n,a)=>{function o(e){e.setFeedbackDefinitions({isMuted:{type:"boolean",name:"Is muted",description:"True when the microphone is muted, false when it is not.",options:[],callback:(n,a)=>e.isMuted},isVideoOn:{type:"boolean",name:"Camera on",description:"True when the camera is on, false when it is not.",options:[],callback:(n,a)=>e.isVideoOn},isHandRaised:{type:"boolean",name:"Hand raised",description:"True when the user has their hand raised, false when it is not.",options:[],callback:(n,a)=>e.isHandRaised},isInMeeting:{type:"boolean",name:"In meeting",description:"True when the user is currently in a meeting, false when he is not.",options:[],callback:(n,a)=>e.isInMeeting},isRecordingOn:{type:"boolean",name:"Recording on",description:"True when the meeting is being recorded, false when it is not.",options:[],callback:(n,a)=>e.isRecordingOn},isBackgroundBlurred:{type:"boolean",name:"Background blurred",description:"True when the background blur is active, false when it is not.",options:[],callback:(n,a)=>e.isBackgroundBlurred},isSharing:{type:"boolean",name:"Sharing Active",description:"True when someone in the meeting is sharing, false when they are not.",options:[],callback:(n,a)=>e.isSharing},hasUnreadMessages:{type:"boolean",name:"Unread Messages",description:"True when the user has unread messages, false when they do not.",options:[],callback:(n,a)=>e.hasUnreadMessages},canToggleMute:{type:"boolean",name:"Can Toggle Mute",description:"True when the user can mute others, false when they can not.",options:[],callback:(n,a)=>e.canToggleMute},canToggleVideo:{type:"boolean",name:"Can Toggle Video",description:"True when the, false when they can not.",options:[],callback:(n,a)=>e.canToggleVideo},canToggleHand:{type:"boolean",name:"Can Toggle Hand",description:"True when , false when they can not.",options:[],callback:(n,a)=>e.canToggleHand},canToggleBlur:{type:"boolean",name:"Can Toggle Blur",description:"True when the camera is on and blue toggle is available, false when it is not.",options:[],callback:(n,a)=>e.canToggleBlur},canLeave:{type:"boolean",name:"Can Leave",description:"True when the user can leave a meeting, false when they can not.",options:[],callback:(n,a)=>e.canLeave},canReact:{type:"boolean",name:"Can React",description:"True when the user can react, false when they can not.",options:[],callback:(n,a)=>e.canReact},canToggleShareTray:{type:"boolean",name:"Can Toggle Share Tray",description:"True when the user can share, false when they can not.",options:[],callback:(n,a)=>e.canToggleShareTray},canToggleChat:{type:"boolean",name:"Can Toggle Chat",description:"True when the user can access the chat, false when they can not.",options:[],callback:(n,a)=>e.canToggleChat},canStopSharing:{type:"boolean",name:"Sharing",description:"True when user is sharing, false when they are not",options:[],callback:(n,a)=>e.canStopSharing},canPair:{type:"boolean",name:"Can Pair",description:"True when user can pair a third party device, false when they can not. This is only useful on first connection.",options:[],callback:(n,a)=>e.canPair}})}a.r(n),a.d(n,{setupFeedbacks:()=>o})}};