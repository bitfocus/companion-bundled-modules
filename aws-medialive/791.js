"use strict";exports.id=791,exports.ids=[791],exports.modules={9791:(e,s,o)=>{o.d(s,{fromSSO:()=>u});var n=o(8112),t=o(3054);const r="To refresh this SSO session run 'aws sso login' with the corresponding profile.",i={},a=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new n.Jh(`Token is expired. ${r}`,!1)},c=(e,s,o=!1)=>{if(void 0===s)throw new n.Jh(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${r}`,!1)};var l=o(9896);const{writeFile:g}=l.promises,w=new Date(0),f=(e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers - fromSso");const s=await(0,t.YU)(e),l=(0,t.Bz)(e),f=s[l];if(!f)throw new n.Jh(`Profile '${l}' could not be found in shared credentials file.`,!1);if(!f.sso_session)throw new n.Jh(`Profile '${l}' is missing required property 'sso_session'.`);const d=f.sso_session,h=(await(0,t.qw)(e))[d];if(!h)throw new n.Jh(`Sso session '${d}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!h[e])throw new n.Jh(`Sso session '${d}' is missing required property '${e}'.`,!1);h.sso_start_url;const u=h.sso_region;let S;try{S=await(0,t.vf)(d)}catch(e){throw new n.Jh(`The SSO session token associated with profile=${l} was not found or is invalid. ${r}`,!1)}c("accessToken",S.accessToken),c("expiresAt",S.expiresAt);const{accessToken:p,expiresAt:_}=S,k={token:p,expiration:new Date(_)};if(k.expiration.getTime()-Date.now()>3e5)return k;if(Date.now()-w.getTime()<3e4)return a(k),k;c("clientId",S.clientId,!0),c("clientSecret",S.clientSecret,!0),c("refreshToken",S.refreshToken,!0);try{w.setTime(Date.now());const e=await(async(e,s)=>{const{CreateTokenCommand:n}=await o.e(526).then(o.bind(o,9526)),t=await(async e=>{const{SSOOIDCClient:s}=await o.e(526).then(o.bind(o,9526));if(i[e])return i[e];const n=new s({region:e});return i[e]=n,n})(s);return t.send(new n({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))})(S,u);c("accessToken",e.accessToken),c("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const o=(0,t.C9)(e),n=JSON.stringify(s,null,2);return g(o,n)})(d,{...S,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return a(k),k}},d=!1,h=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:r,ssoRegion:i,ssoRoleName:a,ssoClient:c,clientConfig:l,profile:g,logger:w})=>{let h;const u="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await f({profile:g})();h={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new n.C1(e.message,{tryNextLink:d,logger:w})}else try{h=await(0,t.vf)(e)}catch(e){throw new n.C1(`The SSO session associated with this profile is invalid. ${u}`,{tryNextLink:d,logger:w})}if(new Date(h.expiresAt).getTime()-Date.now()<=0)throw new n.C1(`The SSO session associated with this profile has expired. ${u}`,{tryNextLink:d,logger:w});const{accessToken:S}=h,{SSOClient:p,GetRoleCredentialsCommand:_}=await o.e(563).then(o.bind(o,2563)),k=c||new p(Object.assign({},l??{},{region:l?.region??i}));let m;try{m=await k.send(new _({accountId:r,roleName:a,accessToken:S}))}catch(e){throw new n.C1(e,{tryNextLink:d,logger:w})}const{roleCredentials:{accessKeyId:y,secretAccessKey:T,sessionToken:C,expiration:x,credentialScope:O,accountId:I}={}}=m;if(!(y&&T&&C&&x))throw new n.C1("SSO returns an invalid temporary credential.",{tryNextLink:d,logger:w});return{accessKeyId:y,secretAccessKey:T,sessionToken:C,expiration:new Date(x),...O&&{credentialScope:O},...I&&{accountId:I}}},u=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:s,ssoAccountId:o,ssoRegion:r,ssoRoleName:i,ssoSession:a}=e,{ssoClient:c}=e,l=(0,t.Bz)(e);if(s||o||r||i||a){if(s&&o&&r&&i)return h({ssoStartUrl:s,ssoSession:a,ssoAccountId:o,ssoRegion:r,ssoRoleName:i,ssoClient:c,clientConfig:e.clientConfig,profile:l});throw new n.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{const o=(await(0,t.YU)(e))[l];if(!o)throw new n.C1(`Profile ${l} was not found.`,{logger:e.logger});if(!(g=o)||"string"!=typeof g.sso_start_url&&"string"!=typeof g.sso_account_id&&"string"!=typeof g.sso_session&&"string"!=typeof g.sso_region&&"string"!=typeof g.sso_role_name)throw new n.C1(`Profile ${l} is not configured with SSO credentials.`,{logger:e.logger});if(o?.sso_session){const i=(await(0,t.qw)(e))[o.sso_session],a=` configurations in profile ${l} and sso-session ${o.sso_session}`;if(r&&r!==i.sso_region)throw new n.C1("Conflicting SSO region"+a,{tryNextLink:!1,logger:e.logger});if(s&&s!==i.sso_start_url)throw new n.C1("Conflicting SSO start_url"+a,{tryNextLink:!1,logger:e.logger});o.sso_region=i.sso_region,o.sso_start_url=i.sso_start_url}const{sso_start_url:i,sso_account_id:a,sso_region:w,sso_role_name:f,sso_session:d}=((e,s)=>{const{sso_start_url:o,sso_account_id:t,sso_region:r,sso_role_name:i}=e;if(!(o&&t&&r&&i))throw new n.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e})(o,e.logger);return h({ssoStartUrl:i,ssoSession:d,ssoAccountId:a,ssoRegion:w,ssoRoleName:f,ssoClient:c,clientConfig:e.clientConfig,profile:l})}var g}}};