"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.forkWorkerThread = exports.WorkerThread = void 0;
const lib_1 = require("../../shared/lib");
const _base_1 = require("./_base");
const WorkerThreads = (0, lib_1.getWorkerThreads)();
/** Functions for spawning worker-threads in NodeJS */
class WorkerThread extends _base_1.WorkerPlatformBase {
    constructor(pathToWorker) {
        super();
        // @ts-ignore
        // this.worker = new window.Worker(pathToWorker)
        if (!WorkerThreads)
            throw new Error('Unable to create Worker thread! Not supported!');
        // No loader, so run the worker directly
        this.worker = new WorkerThreads.Worker(pathToWorker, {
            workerData: ''
        });
        this.worker.on('message', (message) => {
            this.emit('message', message);
            // if (message.type === 'message') {
            // } else console.log('unknown message type', message)
        });
        this.worker.on('messageerror', (error) => {
            this.emit('error', error);
        });
        this.worker.on('error', (error) => {
            this.emit('error', error);
        });
        this.worker.on('exit', (_code) => {
            this.emit('close');
        });
        this.worker.on('close', () => {
            this.emit('close');
        });
    }
    kill() {
        const p = this.worker.terminate();
        if (p) {
            p.then(() => {
                this.emit('close');
            }).catch((err) => {
                console.error('Worker Thread terminate failed', err);
            });
        }
        else {
            // If it didnt return a promise, then it as a blocking operation
            this.emit('close');
        }
    }
    send(message) {
        this.worker.postMessage(message);
    }
}
exports.WorkerThread = WorkerThread;
function forkWorkerThread(pathToWorker) {
    return new WorkerThread(pathToWorker);
}
exports.forkWorkerThread = forkWorkerThread;
//# sourceMappingURL=workerThreads.js.map