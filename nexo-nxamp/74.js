"use strict";exports.id=74,exports.ids=[74],exports.modules={35074:function(t,e,s){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.FetchInstrumentation=void 0;const i=n(s(53053)),r=s(74813),o=s(74681);function a(t){return t instanceof AggregateError?t.errors.map((t=>t.message)).join(", "):t.message}function c(t,e="/"){const s=`${t}`;return t.endsWith("/")&&e.startsWith("/")?`${s}${e.slice(1)}`:t.endsWith("/")||e.startsWith("/")?`${s}${e}`:`${s}/${e.slice(1)}`}e.FetchInstrumentation=class{channelSubs;spanFromReq=new WeakMap;tracer;config;meter;instrumentationName="opentelemetry-instrumentation-node-18-fetch";instrumentationVersion="1.0.0";instrumentationDescription="Instrumentation for Node 18 fetch via diagnostics_channel";subscribeToChannel(t,e){const s=i.default.channel(t);s.subscribe(e),this.channelSubs.push({name:t,channel:s,onMessage:e})}constructor(t){!async function(){try{await fetch("")}catch(t){}}(),this.channelSubs=[],this.meter=o.metrics.getMeter(this.instrumentationName,this.instrumentationVersion),this.tracer=o.trace.getTracer(this.instrumentationName,this.instrumentationVersion),this.config={...t}}disable(){this.channelSubs?.forEach((t=>t.channel.unsubscribe(t.onMessage)))}enable(){this.subscribeToChannel("undici:request:create",(t=>this.onRequest(t))),this.subscribeToChannel("undici:request:headers",(t=>this.onHeaders(t))),this.subscribeToChannel("undici:request:trailers",(t=>this.onDone(t))),this.subscribeToChannel("undici:request:error",(t=>this.onError(t)))}setTracerProvider(t){this.tracer=t.getTracer(this.instrumentationName,this.instrumentationVersion)}setMeterProvider(t){this.meter=t.getMeter(this.instrumentationName,this.instrumentationVersion)}setConfig(t){this.config={...t}}getConfig(){return this.config}onRequest({request:t}){if("CONNECT"===t.method)return;if(this.config.ignoreRequestHook&&!0===this.config.ignoreRequestHook(t))return;const e=this.tracer.startSpan(`HTTP ${t.method}`,{kind:o.SpanKind.CLIENT,attributes:{[r.SemanticAttributes.HTTP_URL]:c(t.origin,t.path),[r.SemanticAttributes.HTTP_METHOD]:t.method,[r.SemanticAttributes.HTTP_TARGET]:t.path,"http.client":"fetch"}}),s=o.trace.setSpan(o.context.active(),e),n={};o.propagation.inject(s,n),this.config.onRequest&&this.config.onRequest({request:t,span:e,additionalHeaders:n}),Array.isArray(t.headers)?t.headers.push(...Object.entries(n).flat()):t.headers+=Object.entries(n).map((([t,e])=>`${t}: ${e}\r\n`)).join(""),this.spanFromReq.set(t,e)}onHeaders({request:t,response:e}){const s=this.spanFromReq.get(t);if(void 0!==s){const t=function(t){for(let e=0;e<t.length;e+=2){const s=t[e];if(14===s.length&&"content-length"===s.toString().toLowerCase()){const s=Number(t[e+1]);return Number.isNaN(Number(s))?void 0:s}}}(e.headers),n={[r.SemanticAttributes.HTTP_STATUS_CODE]:e.statusCode};t&&(n[r.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH]=t),s.setAttributes(n),s.setStatus({code:e.statusCode>=400?o.SpanStatusCode.ERROR:o.SpanStatusCode.OK,message:String(e.statusCode)})}}onDone({request:t}){const e=this.spanFromReq.get(t);void 0!==e&&(e.end(),this.spanFromReq.delete(t))}onError({request:t,error:e}){const s=this.spanFromReq.get(t);void 0!==s&&(s.recordException(e),s.setStatus({code:o.SpanStatusCode.ERROR,message:a(e)}),s.end())}}}};